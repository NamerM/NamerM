Adapting Function 

<form class="form" novalidate>
  <label class="form__field">
    Email
    <input id="email-input" class="form__input" type="email" placeholder="Email" required>
    <span class="email-input-error form__input-error"></span>
  </label>
  <label class="form__field">
    Password
    <input id="password-input" class="form__input" type="password" placeholder="Password" required minlength="6">
    <span class="password-input-error form__input-error"></span>
  </label>
  <button class="form__submit">Sign In</button>
</form>
                  ** js **
  const showInputError = (formElement, inputElement, errorMessage) => {
                        // Find the error message element inside the very function
  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);
                        // The rest remains unchanged
  inputElement.classList.add("form__input_type_error");
  errorElement.textContent = errorMessage;
  errorElement.classList.add("form__input-error_active");
};

const hideInputError = (formElement, inputElement) => {
                      // Find the error message element
  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);
                      // The rest remains unchanged
  inputElement.classList.remove("form__input_type_error");
  errorElement.classList.remove("form__input-error_active");
  errorElement.textContent = "";
};                 
                  
const isValid = (formElement, inputElement) => {
  if (!inputElement.validity.valid) {
   
    showInputError(formElement, inputElement, inputElement.validationMessage);   // The parameter of showInputError() is now a form,which contains a field to be checked
  } else {
    
    hideInputError(formElement, inputElement);  // The same for hideInputError(), Its parameter is now a form, which contains a field to be checked
  }
}; 

---
***Adding Handlers to All Form Fields
 sondaki eventlistener   >>>  formInput.addEventListener("input", isValid) yerine formdaki tüm input field llar için bir kod eklemiş oluyoruz.
 ......
 const setEventListeners = (formElement) => {
                            // Find all fields inside the form, and  make an array from them using the Array.from() method
  const inputList = Array.from(formElement.querySelectorAll(".form__input"));

                            // Iterate over the resulting array
  inputList.forEach((inputElement) => {   // add the input event handler to each field
                           
    inputElement.addEventListener("input", () => {
                            // Call the isValid() function inside the callback, and pass the form and the element to be checked to it
      isValid(formElement, inputElement)
       (buraya toggleButtonState geliyor aşağıdan bakılabilir)
    });
  });
};
 
 ***Adding Handlers to All Forms
 
 const enableValidation = () => {
         // It will find all forms with the specified class in DOM, and make an array from them using the Array.from() method
  const formList = Array.from(document.querySelectorAll(".form"));

      
  formList.forEach((formElement) => {     // Iterate over the resulting array 
    formElement.addEventListener("submit", (evt) => {
               evt.preventDefault();  // Cancel default behavior for each form
    });
    
    setEventListeners(formElement);   // Call the setEventListeners() function for each form, taking a form element as an argument
  });
};

// Call the function
enableValidation();
 
 
 ---Interaction / other DOM elements 
Deactivating submit button incase of an incorrect entry to an input.

::isValid() only validates the input element.
::hasInvalidInput() only 1 invalid is enough for "true"


 // The function takes an array of fields

const hasInvalidInput = (inputList) => {
  
  return inputList.some((inputElement) => {   // iterate over the array using the some() method
        // If the field is invalid, the callback will return true. 
        // The method will then stop, and hasInvalidInput() function will return true  hasInvalidInput returns true.

    return !inputElement.validity.valid;
  })
};
 ---------------------
 // The function takes an array of input fields and the button element, whose state you need to change

const toggleButtonState = (inputList, buttonElement) => {
                 
  if (hasInvalidInput(inputList)) {   // If there is at least one invalid input
                               
    buttonElement.classList.add("form__submit_inactive"); // make the button inactive
  } else {
     
    buttonElement.classList.remove("form__submit_inactive");   // otherwise, make it active
  }
};
 
 -------------- check the button - should be active or not ---------
Adding Handlers to all form fields code is modified below:

const setEventListeners = (formElement) => {
                                           
  const inputList = Array.from(formElement.querySelectorAll(".form__input")); // Find all the form fields and make an array of them
  const buttonElement = formElement.querySelector(".form__submit");  // Find the submit button in the current form
    
  toggleButtonState(inputList, buttonElement);  // Call the toggleButtonState() and pass an array of fields and the button to it
      
  inputList.forEach((inputElement) => {
    inputElement.addEventListener("input", () => {
      isValid(formElement, inputElement);

                                         
    });
  });
};
 
 
 
