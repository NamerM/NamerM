***Pass by Reference ***
Two events occur when you create an object: 1)The object itself is created and stored in memory.
2)A link to this location in memory is added to a variable.(reference)

const firstObj = {
    one: 1,
    two: 2
};

let secondObj = firstObj;
secondObj = { one: 1, two: 2, three: 3 };

console.log(firstObj); //" one: 1, two: 2 "

----------
*** Comparing Objects ***
primitives are compared according to their values, while objects are compared by their references.

const firstObj = { hello: "world" };
const secondObj = { hello: "world" };

console.log(firstObj === secondObj); // false  return (firstObj === secondObj); //
-------
const time = {};
const money = time;
console.log(time === money); // true. time and money are references to the same object.
-------
**object compare by properties function

function isEqual(firstObj, secondObj) {

  const firstKeys = Object.keys(firstObj);
  const secondKeys = Object.keys(secondObj);
  
  // check if the objects have the same number of keys
  if (firstKeys.length !== secondKeys.length) {
    return false;               // if not, that's enough. the objects are clearly not identical
  } 
      
      /* check if values of corresponding keys are equal  in the compared objects */
  return firstKeys.every(function (key) {
    return firstObj[key] === secondObj[key];
  }); 
}
---------
****Copying Objects****
    --Shallow Copy--  Object.assign()
Object.assign(target, ...sources);  {} - empty object
--
const sourceObj = {
    one: 1,
    two: 2
};
const copiedObj = Object.assign({}, sourceObj);
console.log(copiedO=== sourceObj); // false
----
const sourceObj = {
  one: 1,
  two: 2,
  three: { message: "I love JS üñ§" }
};
const copiedObj = Object.assign({}, sourceObj);

console.log(copiedObj === sourceObj);  // false
console.log(copiedObj.three === sourceObj.three);  // true -- copiedObj.one two ile sourceObj.one two denedim i√ßteki value referansƒ±na ge√ßince true oluyor
----
**Deep Copying***

const obj = {
    one: 1,
    two: 2,
    three: { message: "I love JS" }
};

const obj–°opy = Object.assign({}, obj);
obj–°opy.three = Object.assign({}, obj.three);  // *** const objCopy = Object.assign({}, obj, { three: Object.assign({}, obj.three) });   - TEK SATIRLA DEEP COPY 

console.log(obj–°opy);

// { one: 1, two: 2, three: { message: "I love JS" } }  -- we manually copied the objects with shallow copy and than the inner object three nested 1 level inside.
*--------
 *** Approximate algorithm for this type of copying:
1. Start iterating over all the properties of an object with a loop.
2. If the loop finds a primitive property, it is copied.
3. If the loop finds a property which contains an object, repeat steps 1 and 2 for that object.

*** const objCopy = Object.assign({}, obj, { three: Object.assign({}, obj.three) });   - TEK SATIRLA DEEP COPY 

---
Arrays are Objects

*check
const arr = [1, 2, 3];
const obj = {};

console.log(Array.isArray(arr)); // true
console.log(Array.isArray(obj)); // false
---
*passing by ref
const a = [1, 2, 3];
const b = [1, 2, 3];
const c = b;

console.log(a === b); // false
console.log(b === c); // true
---
*Copying
const boringTale = [
  "A dog came in the kitchen",      "And stole a crust of bread.",    "Then cook up with a ladle,",
    "And beat him till he was dead.",    "Then all the dogs came running",    "And dug the dog a tomb",    "And wrote upon the tombstone"
];

const boringTale2 = Object.assign([], boringTale);  // *** curly brackets yerine square brackets ile arrayler yeni objeye kopyalanƒ±r

console.log(boringTale === boringTale2); // false.  // These are two different arrays that have identical sets of elements
---
const boringTale2 = boringTale.slice();

boringTale === boringTale2; // false

/* Comparison returns false since these are two
different arrays. At the same time, all the
elements of each array are identical: */

boringTale[0] === boringTale2[0]; // true
boringTale[1] === boringTale2[1]; // true
boringTale[2] === boringTale2[2]; // true
boringTale[3] === boringTale2[3]; // true
boringTale[4] === boringTale2[4]; // true
boringTale[5] === boringTale2[5]; // true
boringTale[6] === boringTale2[6]; // true 
---------
objects: functions

function multiply(a, b) {
    return a * b;
}
console.log(typeof multiply); // "function"
----
function multiply(a, b) {
    return a * b;
}

/* Functions are objects. Let's add someValue, and assign a value of 4 to it */
multiply.someValue = 4;

/* If you try accessing the function's property  that has the someValue key, it returns 4 */

console.log(multiply.someValue); // 4  - we added property here 
--------
function multiply(a, b) {
  return a * b;
}

let multiplyRef = multiply;

console.log(multiply === multiplyRef); // true -- passing by reference
------
function counter() {
  if (!counter.times) {
    counter.times = 0;
  }
  counter.times += 1; 
    return counter.times;
}
counter(); // 1
counter(); // 2
counter(); // 3
counter(); // 4
counter(); // 5

