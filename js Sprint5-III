***functions

function multiply(a, b) { // this function takes factors as arguments
  return a * b; // and returns a value - the result of multiplying a and b
}
multiply(2, 3); // 6

--Scope  : Scope determines the rules by which the JS engine can search for variables and functions in your code. 
Function Scope:
1. Inside Function
function findBatteries() {
    const batteriesNumber = 8;
    сonsole.log(batteriesNumber); // 8
}
console.log(batteriesNumber); // batteriesNumber is not defined
findBatteries(); // 8

2. Outside the Function
let batteriesNumber = 12;  // global scope
let batteriesInTetris = 4; // global scope

function findBatteries() {
const batteriesNumber = 8; // Local Scope
console.log(batteriesNumber); // 8 - fonksiyonda 8 verilmiş, verilmeseydi 12.
console.log(batteriesInTetris); // 4 - fonsiyonun hemen üstü verilmiş.

Global Scope & Local Scope yukarıda ^
Nested Scope - fonksiyon içeriside başka bir fonksiyonda variable/cons değeeri verilmiş durumlarda.

**function expression vs function declaration

--function inside an expression that calls addEventListener() method
element.addEventListener("click", function () {
 console.log("Click");
}); 
  ----
// first, we've called the function
double(2); // 4

// then, we've declared it
function double(num) {
    return num * 2;
} 
  ---- function with expression - doesn't work...
double(2); // error

const double = function (num) {
    return num * 2;
}; 
---
// Function Declaration
function double(num) {
    return num * 2;
}
// Function Expression
const triple = function (num) {
    return num * 3;
};
double(2); // 4
triple(2); // 6 

// Passing the Function as an argument
const result = [1, 2, 3].reduce(multiply);
console.log(result); // 6 - the sum of all numbers of the array 

// functions can return other functions
const newFucntion = triple();
-- example of returning another function
function helloWorld() {
  console.log("Hello, world!");
}
  return helloWorld;
}
const helloWorld = makeHelloWorld();

console.log(helloWorld);
helloWorld(); // "Hello world!"
---

Arrow Functions
---
/* the following functions are identical */
const singleAnecdote = (joke) => {
    return `I know only one joke: ${joke}`;
};

const shorterSingleAnecdote = (joke) => `I know only one joke: ${joke}`;   //If the return statement is the only thing in the body of the function, you can omit the curly braces and the return keyword:
---

// when the arrow function has multiple parameters, they're placed inside parentheses  
const boatDeparture = (eater, food) => {
    console.log(`a ${eater} and a ${food} cross the river in a boat`);    
};
boatDeparture("goat", "cabbage"); // a goat and a cabbage cross the river in a boat

// parentheses are optional if there's only one parameter
const boatArrival = survivor => {
    console.log(`only the ${survivor} will make it to the riverbank`);
}; 
boatArrival("goat"); // only the goat will make it to the riverbank
---
const array = [1, 2, 3, 4];

array.forEach(() => {
    console.log("The button has been pressed");
}); //callbacks  of arrow function
---

const array = [1, 2, 3, 4];

const newArray = array.map(elem => elem * 2)

---------
Default Parameters

--function generateName(firstName, lastName, middleName = "") {
    return `${firstName} ${middleName} ${lastName}`;
}
generateName("Jane", "Doe"); // Jane Doe
generateName("Jane", "Doe", "Mary"); // Jane Mary Doeers
--
function makeBeastArray(a = "Koala", b = "Wombat", c = "Sloth") {
  return `${a}, ${b}, ${c}`;
}  /* middlename deki gibi*/
---
Spread : https://javascript.plainenglish.io/how-to-get-unique-values-from-an-array-a9896a4c0c4
const nums = [4, 8, 15, 16, 23, 42]; /* let's find the largest number in the array */

Math.max(nums); // NaN - we've got the right method, but an array is not a number
/* the spread operator will divide the array into separate arguments: 4, 8, 15, etc. */

Math.max(...nums); // 42
---
Rest
function consoleDogs(firstDog, ...otherDogs) {
  console.log(`First: ${firstDog}`);
  console.log(`The rest: ${otherDogs}`);
}
consoleDogs("Welsh Corgi", "German Shepherd", "Shiba Inu", "Labradoodle"); 

/* This will be printed to the console:
  First: Welsh Corgi
  The rest: ["German Shepherd", "Shiba Inu", "Labradoodle"]*/

---
Arguments variable
function gimmeSomeArguments() {
    console.log(arguments);  }
gimmeSomeArguments(1, 2); // [1, 2]
gimmeSomeArguments("a", "b", "c", "d", "e"); // ["a", "b", "c", "d", "e"] 
---
Refactoring - making it easier to read : https://javascript.plainenglish.io/refactoring-code-in-javascript-695b42eea1a5



