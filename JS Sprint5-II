*** Arrays *** 

--- concat()  - merges arrays
const toDoList = ["Plant tree", "Build house"];
const toDoListUpdated = toDoList.concat("Raise children");
console.log(toDoListUpdated);

// ["Plant tree", "Build house", "Raise children"]

- const usaAttractions = washingtonDCAttractions.concat(newYorkAttractions, sanFranciscoAttractions); //newYorkAttractions & sanFranciscoAttracts arraylerini birleştirir

--- join()  - concatenates elements of an array and returns a new string. The order of elements doesn't change
const theBeatles = ["John Lennon", "Paul McCartney", "Ringo Starr", "George Harrison"];
console.log(theBeatles.join());   // "John Lennon,Paul McCartney,Ringo Starr,George Harrison"

console.log(`Introducing the Beatles: ${theBeatles.join(", ")}`);  // "Introducing the Beatles: John Lennon, Paul McCartney, Ringo Starr, George Harrison"

// notice that the original array still looks exactly the same: 
console.log(theBeatles);  // ["John Lennon", "Paul McCartney", "Ringo Starr", "George Harrison"]

console.log(theBeatles.join(" | "));
// "John Lennon | Paul McCartney | Ringo Starr | George Harrison" 

--- push() -(LAST Element) Adds element to the end of an array
const array = [ "lion", "wood"];
const array.push("tree", "dot"); // [ "lion", "wood", "tree", "dot"];

--- pop() - (LAST Element) Removes the last element in an array and returns - son array elemanını arraydan silerken , array ismiyle yazıldığında o elemanı listeler.
console.log(array.pop()); // "dot"
console.log(array); // ["lion", "wood", "tree"];  --** Array boşsa pop() komutu sonrası undefined olur

--- shift() - (FIRST element) Removes the first element. Array empty = undefined at console.log
const italianCities = ["Pompeii", "Rome", "Naples"];
const volcanicEruption = italianCities.shift(); // the shift() method returns the removed element **
console.log(volcanicEruption); // "Pompeii"

console.log(italianCities); // ["Rome", "Naples"]

--- unshift() - Adds elements to the Beginning of an array.
const governmentLand = ["Department of Defense", "Bureau of Land Management", "National Park Service", "Fish and Wildlife Service", "Forest Service"];
govermentLand.unshift("Department of Defense", "Bureau of Land Management");
console.log(governmentLand.length); // 5
console.log(governmentLand.unshift("Quick question")); // 6  -- length i uzatıyor aynısı ppop ve push sonrası da denenir? 

pop() - push() tercih ediliyor sona değişiklik yaptığı için - başa yapılırsa tüm elemanların yeri - sırası değiştiğinden tercih edilmiyor.

--- slice()

const spring = months.slice(2, 5); // (3.ay)-> 2. indexten 5'e kadar ama 5. index dahil değil
console.log(spring); // ["March", "April", "May"]

const fourthQuarter = months.slice(9);  //9'dan başlıyor (9. index 10 ay-Ekim)
fourthQuarter; // ["October", "November", "December"] 

- negative # slice()
const autumn = months.slice(-4, -1); // (sondan 4. - sonuncu hariç)
console.log(autumn); // ["September", "October", "November"]

const fourthQuarter = months.slice(-3);     //  -1 -2 -3(sondan 3. den başlıyor )
console.log(fourthQuarter); // ["October", "November", "December"] 

-- yeni array oluşturma
const boringTale2 = boringTale.slice();
console.log(boringTale2); // boringtale2  boringTale'deki arrayleri aynen alır


--- splice() -- Belirli arrayleri keserek çıkarma - sıralama normal index gibi 0'dan başlamıyor
const week = [  "Monday",   "Tuesday",   "Wednesday",  "Thursday",  "Friday",  "Saturday",  "Sunday"];

const removedItems = week.splice(0, 5, "Sunday", "Saturday", "Sunday", "Saturday", "Sunday"); //starting from index 0, delete 5 elements&replace them with these 5 elm.
console.log(removedItems); // ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"] ^replacing removed values is optional

console.log(week); // ["Sunday", "Saturday", "Sunday", "Saturday", "Sunday", "Saturday", "Sunday"]

--- Ekleme
const planets = [ "Mercury",  "Venus",  "Mars",  "Jupiter",  "Saturn",  "Uranus",  "Neptune"];

planets.splice(2, 0, "Earth"); // []
console.log(planets); // ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]


*** Iterating Over an Array.  forEach() & map() Methods

--- forEach() 
const how = ["harder", "better", "faster", "stronger"];

how.forEach(function (item) {
    console.log(item + ".");
}); 
// pay close attention to the use of parentheses here - notice that the whole function, including the body, is contained within the parentheses of the forEach() method
/* harder. /  better. /  faster. /   stronger.  */

how.forEach() ===  for (let i = 0, i < how.lenght, // i++ // i+= 1); console.log(how[i] + ".");  // bu loop üstteki forEach(fonskiyon) ile aynı işlevi görüyor.
-* forEach() 'te break ve continue  kullanılamıyor!!!

--- map()
const firstArr = [0, 1, 2, 3, 4];
const secondArr = firstArr.map(function (item) { // here, each element of the firstArr array is passed through the function
    return item * item; // in this case, we're going to square each element
}); 
console.log(secondArr); // [0, 1, 4, 9, 16]   return kullanılmazsa - undefined gösterir consol'da.
--
forEach() metodu ile her elemanı tek tek kullanacaksa (iterate through each element) tercih ediyoruz
map() used for modifying each element and return a new array containing these changes:

const tweets = [
    {   user: "@TheFlash",
        date: "Feb 16, 2019",
        text: "Life doesn't give us purpose. We give life purpose."
    },
    {   user: "@Dory",
        date: "Feb 24, 2019",
        text: "Just keep swimming."
    },
    {   user: "@CookieMonster",
        date: "Feb 24, 2019",
        text: "A friend is something better than chocolate ice cream..."
    }
];
const tweetsTextOnly = tweets.map(function (item) {
    return item.text;
});
tweetsTextOnly.forEach(function (item) {
    console.log(item);
});

/*  Life doesn't give us purpose. We give life purpose. Just keep swimming. A friend is something better than chocolate ice cream... */
---task 


*** Callback function : callbacks used for array methods have three parameters.    // forEach() & map()

---Parameters 1: The Current Element:
const jobTitles = [      "Wizard of Light Bulb Moments",    "Ghost Hunter",    "Champagne Tester",    "Legal Bank Robber"];
jobTitles.forEach(function (item) {   console.log(item);});    // sırayla listeler

---Parameters 2: Index of the Current Item 
const counter = [ "Emperor", "King", "Casear", "Pharaoh", "Sultan", "Tsar"];
const counterIndexed = counter.map (function (person, index) { 
return `${index+1}. ${person}`});
console.log(counterIndexed);  // "1. Emperor", "2.King" ...

---Parameters3: Original Array
const kings = [ "Louis I the Fair", "Louis II the Stammerer", "Louis III", "Louis IV Trnasmarinus", "Louis V the Do-Nothing" ];
const kingsIndexed = kings.map(function (item, index, array) {
const currentIndex = `(${(index+1)} of ${array.length})`;
return `${item} ${currentIndex}`;
});
console.log(kingsIndexed); //  "Louis I the Fair (1 of 5)", "Louis II the Stammerer (2 of 5)", ...

*** filter()   Method

const a = [1, 9, 2, 2, 3, 4, 1, 7, 8, 0, 9, 0, 1, 5, 3];
const b = a.filter(function (item, index, array) {
    return array.lastIndexOf(item) === index; // this will return the unique elements
});
console.log(a); // [1, 9, 2, 2, 3, 4, 1, 7, 8, 0, 9, 0, 1, 5, 3]
console.log(b); // [2, 4, 7, 8, 9, 0, 1, 5, 3]

--
const nobel = `Wilhelm Conrad Röntgen, Germany; Pieter Zeeman, Netherlands; Hendrik Antoon Lorentz, Netherlands; Antoine Henri Becquerel, France; Pierre Curie, France; Marie Curie, née Sklodowska, France; Lord Rayleigh (John William Strutt), United Kingdom; Philipp Eduard Anton von Lenard, Germany; Joseph John Thomson, United Kingdom; Albert Abraham Michelson, USA; Gabriel Lippmann, France; Guglielmo Marconi, Italy; Karl Ferdinand Braun, Germany; Johannes Diderik van der Waals, Netherlands; Wilhelm Wien, Germany; Nils Gustaf Dalén, Sweden; Heike Kamerlingh Onnes, Netherlands; Max von Laue, Germany; Sir William Henry Bragg, United Kingdom; Sir William Lawrence Bragg, United Kingdom; Charles Glover Barkla, United Kingdom; Max Karl Ernst Ludwig Planck, Germany; Johannes Stark, Germany; Charles Edouard Guillaume, Switzerland; Albert Einstein, Germany; Niels Henrik David Bohr, Denmark; Robert Andrews Millikan, USA; Karl Manne Georg Siegbahn, Sweden; Gustav Ludwig Hertz, Germany; James Franck, Germany; Jean Baptiste Perrin, France; Charles Thomson Rees Wilson, United Kingdom; Arthur Holly Compton, USA; Owen Willans Richardson, United Kingdom; Louis de Broglie, France; Sir Chandrasekhara Venkata Raman, India; Werner Karl Heisenberg, Germany; Paul Adrien Maurice Dirac, United Kingdom; Erwin Schrödinger, Austria; James Chadwick, United Kingdom; Carl David Anderson, USA; Victor Franz Hess, Austria; Clinton Joseph Davisson, USA; George Paget Thomson, United Kingdom; Enrico Fermi, Italy; Ernest Orlando Lawrence, USA; Otto Stern, USA; Isidor Isaac Rabi, USA; Wolfgang Pauli, USA; Percy Williams Bridgman, USA; Sir Edward Victor Appleton, United Kingdom; Patrick Maynard Stuart Blackett, United Kingdom; Hideki Yukawa, Japan; Cecil Frank Powell, United Kingdom; Sir John Douglas Cockcroft, United Kingdom; Ernest Thomas Sinton Walton, United Kingdom; Felix Bloch, USA; Edward Mills Purcell, USA; Frits Zernike, Netherlands; Max Born, Germany; Walther Bothe, Germany; Polykarp Kusch, USA; Willis Eugene Lamb, USA; John Bardeen, USA; Walter Houser Brattain, USA; William Bradford Shockley, USA; Tsung-Dao Lee, USA; Chen Ning Yang, USA; Igor Yevgenyevich Tamm, USSR; Ilya Mikhailovich Frank, USSR; Pavel Alekseyevich Cherenkov, USSR; Emilio Gino Segrè, USA; Owen Chamberlain, USA; Donald Arthur Glaser, USA; Rudolf Ludwig Mössbauer, Germany; Robert Hofstadter, USA; Lev Davidovich Landau, USSR; Eugene Paul Wigner, USA; Maria Goeppert Mayer, USA; J. Hans D. Jensen, Germany; Nicolay Gennadiyevich Basov, USSR; Aleksandr Mikhailovich Prokhorov, USSR; Charles Hard Townes, USA; Sin-Itiro Tomonaga, Japan; Richard P. Feynman, USA; Julian Schwinger, USA; Alfred Kastler, France; Hans Albrecht Bethe, USA; Luis Walter Alvarez, USA; Murray Gell-Mann, USA; Hannes Olof Gösta Alfvén, Sweden; Louis Eugène Félix Néel, France; Dennis Gabor, United Kingdom; Leon Neil Cooper, USA; John Robert Schrieffer, USA; Ivar Giaever, USA; Brian David Josephson, United Kingdom; Leo Esaki, USA; Sir Martin Ryle, United Kingdom; Antony Hewish, United Kingdom; Aage Niels Bohr, Denmark; Ben Roy Mottelson, Denmark; Leo James Rainwater, USA; Burton Richter, USA; Samuel Chao Chung Ting, USA; Philip Warren Anderson, USA; John Hasbrouck van Vleck, USA; Sir Nevill Francis Mott, United Kingdom; Robert Woodrow Wilson, USA; Pyotr Leonidovich Kapitsa, USSR; Arno Allan Penzias, USA; Steven Weinberg, USA; Sheldon Lee Glashow, USA; Abdus Salam, United Kingdom; James Watson Cronin, USA; Val Logsdon Fitch, USA; Nicolaas Bloembergen, USA; Arthur Leonard Schawlow, USA; Kai M. Siegbahn, Sweden; Kenneth G. Wilson, USA; William Alfred Fowler, USA; Subramanyan Chandrasekhar, USA; Simon van der Meer, Switzerland; Carlo Rubbia, Switzerland; Klaus von Klitzing, Germany; Gerd Binnig, Switzerland; Heinrich Rohrer, Switzerland; Ernst Ruska, Germany; J. Georg Bednorz, Switzerland; K. Alexander Müller, Switzerland; Leon M. Lederman, USA; Jack Steinberger, Switzerland; Melvin Schwartz, USA; Norman F. Ramsey, USA; Hans G. Dehmelt, USA; Wolfgang Paul, Germany; Henry W. Kendall, USA; Richard E. Taylor, USA; Jerome I. Friedman, USA; Pierre-Gilles de Gennes, France; Georges Charpak, Switzerland; Joseph H. Taylor Jr., USA; Russell A. Hulse, USA; Bertram N. Brockhouse, Canada; Clifford G. Shull, USA; Martin L. Perl, USA; Frederick Reines, USA; David M. Lee, USA; Douglas D. Osheroff, USA; Robert C. Richardson, USA; Claude Cohen-Tannoudji, France; William D. Phillips, USA; Steven Chu, USA; Robert B. Laughlin, USA; Daniel C. Tsui, USA; Horst L. Störmer, USA; Martinus J.G. Veltman, USA; Gerardus ‘t Hooft, Netherlands; Zhores I. Alferov, Russia; Jack S. Kilby, USA; Herbert Kroemer, USA; Carl E. Wieman, USA; Wolfgang Ketterle, USA; Eric A. Cornell, USA; Riccardo Giacconi, USA; Raymond Davis Jr., USA; Masatoshi Koshiba, Japan; Alexei A. Abrikosov, USA; Vitaly L. Ginzburg, Russia; Anthony J. Leggett, USA; Frank Wilczek, USA; David J. Gross, USA; H. David Politzer, USA; Roy J. Glauber, USA; Theodor W. Hänsch, Germany; John L. Hall, USA; John C. Mather, USA; George F. Smoot, USA; Peter Grünberg, Germany; Albert Fert, France; Makoto Kobayashi, Japan; Toshihide Maskawa, Japan; Yoichiro Nambu, USA; Willard S. Boyle, USA; Charles Kuen Kao, China; George E. Smith, USA; Andre Geim, United Kingdom; Konstantin Novoselov, United Kingdom; Saul Perlmutter, USA; Adam G. Riess, USA; Brian P. Schmidt, Australia; Serge Haroche, France; David J. Wineland, USA; Peter W. Higgs, United Kingdom; François Englert, Belgium; Isamu Akasaki, Japan; Hiroshi Amano, Japan; Shuji Nakamura, USA; Takaaki Kajita, Japan; Arthur B. McDonald, Canada; David J. Thouless, USA; F. Duncan M. Haldane, USA; J. Michael Kosterlitz, USA; Rainer Weiss, USA; Barry C. Barish, USA; Kip S. Thorne, USA; Arthur Ashkin, USA; Gérard Mourou, France; Donna Strickland, Canada`;

const nobelArr = nobel.split( ";"); /* divide the string up into elements of an array here */

const filtNobel = nobelArr.filter(function (scientist) {
  return scientist.includes("USA") || scientist.endsWith("Germany"); /* filter the scientists from the USA and Germany here */  
});
console.log(filtNobel);
---

*** some() Method  sadece true or false kontrolu yapar ve gösterir
const haystack = ["hay", "hay", "hay", "hay", "hay", "hay", "yet more hay"];

const needle = haystack.some(function(item) {
    return item === "needle";   // return item === "yet more hay";
});
console.log(needle); // false  // true
--
*** find() method  - kontrolü yapar ve ilk true değeri gösterir

const flock = [     "Sheep",     "Black-and-white sheep",    "Black sheep",    "Blue sheep"];
const includesSheep = flock.some(function (sheep) {
    return sheep.includes("sheep");
});
const sheep = flock.find(function (sheep) {
    return sheep.includes("sheep");
});
console.log(includesSheep); // true  - ilk arrayde buldu ve durdu 
console.log(sheep); // "Black-and-white sheep"  - 2. arrayde buldu ver durdu

-----
*** every() Method
const jokes = [    "a funny joke and a grain of truth", "a remarkably unfunny anecdote + a grain of truth","a grain of truth in a corny joke"];
const allJokesWithTruth = jokes.every(function (joke) {
    return joke.indexOf("a grain of truth") > -1;   // joke.includes("a grain of truth);  bu da olur
});
console.log(allJokesWithTruth); // true
----
const integersToCheck = [2, 3, 193, 79, 7, 29];

function isPrime(num) {
  /* code the function body */ for ( let i = 2; i < num; i+=1) {
    if (num % i === 0) {
      return false;
  }
}
return true;
};
integersToCheck.every(isPrime);
----

*** reduce() method
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

const sum = arr.reduce(function (previousValue, item) {
  // for clarity, log these arguments to the console
  console.log(`previousValue: ${previousValue}, item: ${item}`);
  return previousValue + item;
});

console.log(`sum: ${sum}`);

/*
 previousValue: 1, item: 2 |  previousValue: 3, item: 3 | previousValue: 6, item: 4 | previousValue: 10, item: 5 |  previousValue: 15, item: 6
 previousValue: 21, item: 7 |  previousValue: 28, item: 8 |  previousValue: 36, item: 9
 sum: 45
*/

-----

***sort() method
const myNumbers = [0, 3.14, 2.718, 13];

myNumbers.sort(function (a, b) {
    return a - b;  /* If a less than b, a negative number will be returned. It means that a is to be placed before b in the final array. For example: a = 0, b = 3.14  &  a - b = -3.14     Received a negative number, so a goes before b */
}); 

console.log(myNumbers); // [0, 2.718, 3.14, 13] — correct for ascending order return b - a for descending order

-- sort() strings with not a number type:

const diseases = [
    "Mysophobia",   "Fear of missing out", "Erythrophobia"
];

diseases.sort(function(a, b) {
  /* let's convert the strings to lowercase to ensure the comparison works */ 
  a = a.toLowerCase();
  b = b.toLowerCase();

    if (a < b) return -1; // a will come before b
    if (b < a) return 1; // b will come before a
  return 0;
});

console.log(diseases); /* ["Erythrophobia","Fear of missing out", "Mysophobia"] */

----
imperative programming: main goal is to describe the sequence of steps that need to be followed to achieve the desired result.

declarative programming: specifies what needs to be achieved without going through the details of how to do it.


