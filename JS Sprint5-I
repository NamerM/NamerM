*** let & const vs var ***
Try to use constants wherever possible. Only use let if you know that the value of your variable will need to be changed at some point.

*** Primitive Dataypes & typeof
String, Number, BigInt( huge number), Boolean - which can be true or false, undefined, null, Symbol

**typeof : checks type - returns string. The returned or checked data called 'opeerand'.
  typeof 10; // number  -- typeof "Hello"; // "string" etc.
  typeof true; // "boolean" -- typeof undefined; // "undefined"  
  typeof (10 + 5) // "number" -- typeof 10 + 5 // "number5"
  typeof NaN; // "number" - Yes, "Not a Number" is actually a "number".
  typeof null; // "object" - This is actually an officially recognized bug in JavaScript, but they decided not to fix it to avoid backward compatibility issues.
  typeof function () {} // "function" - Even though there's no such data type.
  
*** Lonely Data Types:  undefined && null ***
  no value assigned , returns a value of undefined.

***Strings ***
console.log("ABCDEFGHIJKLMNOPQRSTUVWXYZ".length);  // 26
console.log("espresso"[0]); // "e"  .. console.log("espresso"[2]); // "p"   -- index burada sayısal konumu 0'dan başlayarak...

--
let georgianaAugustaKeats = "";

for (let i = 0; i < acrostic.length; i += 1) {
georgianaAugustaKeats += acrostic[i][0];   /* add every first character of every string in the array to the georgianaAugustaKeats variable */
}
console.log(georgianaAugustaKeats);
-- //second index kullanımı var...

*** indexOf() *** (string teki yerini veriyor)
"Practicum by Yandex".indexOf("P"); // 0  - aynı harften 1den fazla olsa dahi ilkinin konumunu verir.
"espresso".indexOf("x"); // -1   olmayan harf için -1

const elements = "Earth, Air, Fire, Water";
elements.indexOf("Fire"); // 12   Fire 12. indexte başlıyor.

"Racecar".indexOf("R"); // 0  .. "Racecar".indexOf("r"); // 6  Case sensitive

*** includes() ***
"Harry Potter and the Prisoner of Azkaban".includes("Harry Potter"); // true
"Teamwork".includes("I"); // false

*** startsWith() & endsWith() ***
"Vendetta".startsWith("V"); // true  .. "The perfect date".startsWith("Dinner and a movie"); // false

const theRealEnd = "This is not the end"; -- theRealEnd.endsWith("end"); // true

*** toLowerCase() & toUpperCase() ***

*** split()  - used to divide strings into elements of array    "I came. I saw. I conquered.".split(" "); // [ 'I', 'came.', 'I', 'saw.', 'I', 'conquered.' ]

***slice() ***
"Believe".slice(2, 5); // "lie"
"Google Translate".slice(7); // "Translate"

***Infinity & isFinite()
Number.isFinite(Infinity); // false  -- Number.isFinite(-Infinity); // false -- Number.isFinite(1703); // true

*** NaN
console.log(typeof NaN); // "number"
Number.isNaN(NaN); // true  -- console.log(Number.isNaN(0 / 0)); // true

*** MATH - Math ***
Math.floor(9.99) // 9  -- Math.Ceil(9,01); // 10 --- Math.round(9.51); // 10 
Math.max(1, 2, 3, 4, 5); // 5 --- Math.random(); // 0,3145616489657988513656

*** parseInt() ***
parseInt("99 Red Balloons"); // 99 -- parseInt("Catch 22"); // NaN
radix

*** parseFloat() ***
parseFloat('98.6'); // 98,6


***Number.isInteger() ***
const eightAndAHalf = 8.5;
Number.isInteger(eightAndAHalf); // false
Number.isInteger(Math.floor(eightAndAHalf)); // true

***Implicit Conversion***
-Conversion to String
1 + ""; // "1" -- burada baştan "" + ekleyerek gerisini de stringe çevirdi js --- undefined + ""; // "undefined"

-Converstion to Number
Unary plus.  +"33" // 33  ,  +"-88" // 88  - without a space infron of a non-numerical value
console.log("3" - 1); // 2 — converted to number -- console.log("2" * 2); // 4 — also converted to number
console.log("4" / 4); // 1 — again converted to number -- console.log("4" + 4); // 44 — concatenation

-Converstion to Boolean
const usernameElement = document.querySelector(".username"); // bilgi girilmezse boş element null value oluyor
if (usernameElement) {
    console.log("Hello " + usernameElement.textContent); 
}   /// 

*** Explicit Type Conversion ***
--- String() ---
const numberToString = String(2); // "2"    --- const nanToString = String(NaN); // "NaN"  --- const undefinedToString = String(undefined); // "undefined"
const nullToString = String(null); // "null" --- const booleanToString = String(true); // "true"

--- Number() ---
const stringToNumber = Number("2"); // 2   ---  const nullToNumber = Number(null); // 0
const stringToNumber = Number("Always look on the bright side of life."); // NaN  --- const undefinedToNumber = Number(undefined); // NaN

--- Boolean()---
Boolean(2) , Boolean("any string that isn't empty") , Boolean({}) , Boolean([]) , Boolean(true) // true
Boolean(0) , Boolean("") , Boolean(NaN) , Boolean(undefined) , Boolean(null), Boolean(false) // false  0/no values always false


*** Logical Operators ***
! — logical NOT  // || — logical OR  //  && — logical AND

--- Logical Not Operator (!) 
!false // true    ---- !(3 > 2) === 3 <= 2;  // true - it turned 1st into false === false 

let password = "JavaScript";
function checkPassword(pass) {
    if (pass !== password) {
        console.log("Wrong password");
        return;
    }  // If the user passes an incorrect password, the function will log "Wrong password" and return, meaning it will stop the function.

    console.log("Correct password");
}
checkPassword("java script"); // "Wrong password"
checkPassword("JavaScript"); // "Correct password"

--- Logical Or Operator (||)  - Returns the first truth value.
function howDoYouDo(answer) {
    const result = answer || "fine";
    return result;
}
howDoYouDo("better than ever"); // "better than ever"
howDoYouDo(); // "fine"

--- Logical And Operator (&&)
Order Priority : first goes !, then &&, and then ||  (Logical Not, And, Or) 

const optimism = !"Live" && !"Laugh" || "Live, Laugh, Love"; 
console.log(optimism); // "Live, Laugh, Love"

/* first goes !, then &&, and then || */ 
First, it evaluates !"Live" → false, then !"Laugh" → false, then false && false → false, and lastly false || "Live, Laugh, Love" → "Live, Laugh, Love".
******

function checkTheCar (distance, model, damaged, price) {
    const canBuy = distance <= 100000 && (model === "Ford" || model === "Chevrolet") && !damaged && price <= 10000;
    return canBuy;
}
checkTheCar(50000, "Chevrolet", false, 7000); // true — Yay! It works.

**** Switch ****
const yourNumber = "D135";
let windowNumber;

switch (yourNumber) {
    case "D133":
        windowNumber = 1;
        break;
    case "D134":
        windowNumber = 2;
        break;
    case "D135":
        windowNumber = 3;
        break;
    case "D136":
        windowNumber = 4;
        break;
    case "D137":
        windowNumber = 5;
}

console.log(windowNumber); // 3   Son 'case' den sonra break ihtiyacı yok zaten kod bittiğinden

-- default ---
let catName;
const cartoon = "Garfield and Friends";

switch (cartoon) {
    case "Shrek 2":
        catName = "Puss in Boots";
        break;
    default:
        catName = "Garfield";
}

console.log(catName); // "Garfield"

*** Ternary Operator ***
/* condition */ ? /* value if true */ : /* value if false */
const money = 100;
let activity;
------- if statement ile daha uzunca ----
if (money >= 50) {
    activity = "Go out and party!";
} else {
    activity = "Stay in and play a board game.";
}
console.log(activity); // "Go out and party!"

---Ternary Operator ile çok daha sade kod yazılıyor , if statements can return multiple statemens - so ternary operatory is better when we return a true or false values:
const money = 100;
const activity = money >= 50 ? "Go out and party!" : "Stay in and play a board game.";
console.log(activity); // "Go out and party!"
